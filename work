#!/usr/bin/python

import subprocess
import sqlite3
import os.path
import os
import sys

import datetime
import calendar
import time
import dateutil.parser

class WorkLogDB:

	def __init__(self):
		dbpath = os.path.join(os.environ['HOME'], '.workon')
		dbfile = os.path.join(dbpath, 'worklog.db')

		if os.path.exists(dbfile):
			self.db = sqlite3.connect(dbfile, detect_types=sqlite3.PARSE_COLNAMES)
		else:
			try:
				os.mkdir(dbpath)
			except OSError as e:
				pass
			self.db = sqlite3.connect(dbfile)
			self.initdb()

	def initdb(self):
		self.db.execute("""
			CREATE TABLE worklog (
				id      INTEGER  NOT NULL PRIMARY KEY,
				start   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
				end     TIMESTAMP          DEFAULT NULL,
				comment TEXT
			)
			""")
		self.db.commit()

	def create(self, comment):
		stmt = self.db.cursor()
		query = """
			INSERT INTO worklog(start, comment)
			VALUES(
				CURRENT_TIMESTAMP,
				?
			)
		"""
		stmt.execute(query, (comment,))
		self.db.commit()

	def close_existing(self):
		stmt = self.db.cursor()
		query = """
			UPDATE worklog
			SET
				end  = CURRENT_TIMESTAMP
			WHERE
				end IS NULL
		"""
		stmt.execute(query)
		self.db.commit()

	def resume(self, restart_id = None):
		"""Restarts task with given ID (or the last one if no id is given).

		Returns the comment of the newly created task as a string. """

		if restart_id is None:
			restart_id = self.get_last_entry_id()

		stmt = self.db.cursor()
		query = """
			INSERT INTO worklog(
				start, end, comment
			)
			SELECT
				CURRENT_TIMESTAMP,
				NULL,
				comment
			FROM
				worklog
			WHERE
				id = ?
		"""
		stmt.execute(query, [restart_id])
		self.db.commit()

		# now find out comment of last entry
		new_id = self.get_last_entry_id()
		query = """
			SELECT comment
			FROM   worklog
			WHERE  id = ?
		"""
		stmt = self.db.cursor()
		stmt.execute(query, [new_id])
		return stmt.fetchone()[0]


	def sec2time(self, seconds):
		if seconds is None:
			seconds = 0
		else:
			seconds = int(seconds)

		# Round minutes properly: add 30 seconds, then do an int division by 60.
		# This causes minutes to be rounded up if seconds % 60 > 30. Then, we
		# calculate the hours and the remainder in minutes from there.

		minutes = (seconds + 30) / 60
		hours   = int(minutes / 60)
		minutes = int(minutes - hours * 60)


		return "%02d:%02d" % (hours,minutes)

	def get_last_entry_id(self):
		"""Returns the ID of the last entry"""
		query = """
			SELECT
				MAX(id) AS id
			FROM
				worklog
		"""
		stmt = self.db.cursor()
		stmt.execute(query)
		self.db.commit()

		row = stmt.fetchone()

		return int(row[0])

	def reset_last(self):
		"""Removes the last logged entry"""
		id = self.get_last_entry_id()

		if id > 0:
			stmt = self.db.cursor()

			query = """
				DELETE FROM worklog
				WHERE
					id = ?
			"""
			stmt.execute(query, (id,))
			self.db.commit()

			return "Last entry reset"
		return "Empty DB - didn't reset!"

	def update_last(self, comment):
		"""Changes the text of the last logged entry"""
		id = self.get_last_entry_id()

		if id > 0:
			stmt = self.db.cursor()

			query = """
				UPDATE worklog
				SET    comment = ?
				WHERE
					id = ?
			"""
			stmt.execute(query, (comment, id))
			self.db.commit()
			return "Updated last entry with new comment"

		return "Empty DB - couldn't edit!"

	def entries_since(self, since, comment=''):
		"""Iterator for all entries. Yields a hashmap with the data"""
		stmt = self.db.cursor()

		query = """
			SELECT
				strftime('%s', start)             AS start,
				strftime('%s', end)               AS end,
				strftime('%s', CURRENT_TIMESTAMP) AS now,
				comment,
				strftime('%Y-%m-%d', start)       AS date,
				id
			FROM worklog
			WHERE
				start > DATETIME(?) AND
				comment LIKE ?
		"""

		comment = '%' + '%'.join(comment.split(' ')) + '%';
		stmt.execute(query, (since, comment))
		self.db.commit()


		for row in stmt:
			start   = int(row[0])
			end     = 0
			now     = int(row[2])
			comment = row[3]
			date    = row[4]
			unfinished = False
			if row[1] is not None:
				end = int(row[1])

			if row[1] is None:
				duration   = now - start
				unfinished = True
			else:
				duration = end - start

			yield {
				'id':         row[5],
				'start':      start,
				'end':        end,
				'duration':   duration,
				'unfinished': unfinished,
				'date':       date,
				'comment':    comment,
			}

	def sum_since(self, since):
		sums = {}
		for entry in self.entries_since(since):
			if entry['date'] not in sums:
				sums[entry['date']] = 0
			sums[entry['date']] += entry['duration']

		dates = sorted(sums.keys())

		out = ''
		for date in dates:
			out += "%s: %s\n" % (date, self.sec2time(sums[date]))

		return out

	def _date_to_datetime(self, d):
		return datetime.datetime.combine(d, datetime.time.min)

	parsers = []

	def _now_parse(self, s):
		if s == 'now':
			return self._date_to_datetime(datetime.datetime.now().date())
		else:
			raise Exception

	parsers.append(_now_parse)

	def _dutil_parse(self, s):
		return dateutil.parser.parse(s)

	parsers.append(_dutil_parse)

	try:
		import parsedatetime.parsedatetime
		_pdt = parsedatetime.parsedatetime.Calendar()
		def _pdt_parse(self, s):
			tt = self._pdt.parse(s)
			if tt[1] == 0: raise Exception
			dt = datetime.datetime.fromtimestamp(time.mktime(tt[0]))
			if tt[1] == 1: dt = self._date_to_datetime(dt.date())
			return dt
		parsers.append(_pdt_parse)
	except: pass

	def list_since(self, since, showdate, query=''):
		for parse in self.parsers:
			try:
				since = parse(self, since)
			except: pass
			else: return self.do_list_since(since, showdate, query)
		print "Could not parse '%s' as a time string" % since
		if not hasattr(self, '_pdt'):
			print "For better datetime parsing please install parsedatetime from https://github.com/bear/parsedatetime"
		sys.exit(1)

	def do_list_since(self, dt, showdate, query):
		now = datetime.datetime.now()
		if dt > now:
			oneweek = datetime.timedelta(weeks=1)
			while dt > now:
				dt -= oneweek

		out = "Listing work since %s\n\n" % dt

		total_time = 0
		for entry in self.entries_since(dt, query):
			total_time += entry['duration']

			if entry['unfinished']:
				line = "%s (still running) - %s\n" % (self.sec2time(entry['duration']), entry['comment'])
			else:
				line = "%s (id: %9d) - %s\n" % (self.sec2time(entry['duration']), entry['id'], entry['comment'])

			if showdate:
				line = "%s: %s" % (entry['date'], line)

			out += line

		out += "\nTotal time: %s" % self.sec2time(total_time)

		return out

def show_help(error = None):
	if error is not None:
		print(error)
		print("")

	print("Available actions:")
	print("  work on <task-description>     -- start working on given task description, stop any previous task")
	print("  work on --ask                  -- stop any previous task, shows a dialog for entering your current task")
	print("  work over                      -- stop current task")
	print("  work today                     -- list all tasks recorded today")
	print("  work reset                     -- removes last task")
	print("  work resume                    -- resumes the last logged task")
	print("  work resume <id>               -- resumes task with given id")
	print("  work edit <task-description>   -- edits text of last task")
	print("  work sum                       -- Sum of work time, grouped by day")
	print("  work since <date/time>         -- list all tasks since the given date")
	print("  work done since <datetime>     -- list work done since <time>")
	print("  work done on <subject>         -- list work done with comments that match 'subject'")
	print("  work done since <time> on <subject>")


	print("")
	print("Work today: ")
	print(log.list_since('now', False))


def ask(question):
	"""Shows a dialog box to the user, then returns the entered text."""
	command = [
		'zenity',
		'--entry',
		'--text=%s' % question
	]
	return subprocess.check_output(command).strip().decode('utf8')

def parse_query(query):
	since_idx = -1
	on_idx = -1
	query = query.split(' ')

	try:
		on_idx = query.index('on')
		on = " ".join(query[on_idx+1:])
	except:
		on_idx = len(query)
		on = ''

	try:
		since_idx = query.index('since')
		since = " ".join(query[since_idx+1:on_idx])
	except:
		since = '1970-01-01'

	return (since, on)

if __name__ == '__main__':
	# action is first argument, rest is comment
	action = ''
	comment = ''
	if(len(sys.argv) > 1):
		action = sys.argv[1]
		if(len(sys.argv) > 2):
			comment = " ".join(sys.argv[2::])

	log = WorkLogDB()

	if action == 'on':
		log.close_existing()
		if comment == '--ask':
			comment = ask('What are you working on?')
		if comment == '' or comment == 'nothing':
			print("Not working on anything, not logging")
		else:
			log.create(comment)
			print("New entry stored.\n\n")
			print(log.list_since('now', False))

	elif action == 'over':
		log.close_existing()
		print("Stopped tracking.")

	elif action == 'resume':
		log.close_existing()

		try:
			restart_id = int(comment)
		except:
			restart_id = None

		restarted = log.resume(restart_id)
		print("Restarted task '%s'." % restarted)

	elif action == 'today':
		print(log.list_since('now', False))

	elif action == 'sum':
		print(log.sum_since('1970-01-01')),

	elif action == 'done' or action == 'since':
		if action == 'since': comment = 'since ' + comment
		since, on = parse_query(comment)
		if on != '' or since != '':
			print(log.list_since(since, True, on))
		else:
			show_help('I need an argument! For example: ' +
			          'work done since yesterday on something')

	elif action == 'reset':
		print(log.reset_last()),

	elif action == 'edit':
		if comment != '':
			print(log.update_last(comment)),
		else:
			show_help("When editing, you should give me a new comment")

	else:
		show_help("Unknown action: %s" % action)


